# sidebarLayout
# sidebar panel for inputs
sidebarLayout (
sidebarPanel(
# Input : bins의 수를 slider로 구현
sliderInput(inputId="bins",
label = "Number of bins:",
min=1,
max=50,
value=30)
),
mainPanel(
# Output: Histgram
plotOutput(outputId="distPlot")
)
)
)
server <- function(input, output){
output$distPlot <- renderPlot( {
x = faithful$waiting
bins = seq(min(x), max(x), length.out=input$bins + 1)
hist(x, breaks=bins, col="#75AADB")
})
}
shinyApp(ui=ui,server=server)
library(shiny)
ui <- fluidPage(
# *Input()  함수로 입력받는 요소
# *Output() 함수로 결과물을 출력 후, 배치
## titlePanel, sidebarLayout, mainPanel로 구성
# App title
titlePanel("Hello My Shiny!"),
# sidebarLayout
# sidebar panel for inputs
sidebarLayout (
sidebarPanel(
# Input : bins의 수를 slider로 구현
sliderInput(inputId="bins",
label = "Number of bins:",
min=1,
max=50,
value=30)
),
mainPanel(
# Output: Histgram
plotOutput(outputId="distPlot")
)
)
)
server <- function(input, output){
output$distPlot <- renderPlot( {
x = faithful$waiting
bins = seq(min(x), max(x), length.out=input$bins + 1)
hist(x, breaks=bins, col="#75AADB")
})
}
shinyApp(ui=ui,server=server)
data("faithful")
dim(faithful)
library(shiny)
server <- function(input, output){}
ui<- fluidPage(
library(shiny)
library(shiny)
ui <- fluidPage(
titlePanel("Shiny Text"),
sidebarLayout(
sidebarPanel(
selectInput(inputId="dataset",
label="데이터 셋 선택:",
choices=c("rock", "pressure", "cars")),
numericInput(inputId='obs',
label="관측치의 수",
value=10)
),
mainPanel(
# Output:Verbatim text for data summary ----
verbatimTextOutput("summary"),  #코드 글자
# Output: HTML table
tableOutput("view")   # 글자
)
)
)
server <- function(input, output){
# selectInput(inputId="dataset"
# 요청된 데이터 셋이 반환됨.
datasetInput <- reactive({
switch(input$dataset,
"rock" = rock,
"pressure" = pressure,
"cars" = mtcars)
})
# data
# verbatimTextOutput("summary")
output$summary <- renderPrint({
dataset <- datasetInput()
summary(dataset)
})
# 첫 n개의 관측치를 보여준다.
output$view <- renderTable({
head(datasetInput(), n=input$obs)
})
}
## 실습 1. dateset(USArrests, iris, mtcars)를 불러와서 이를
## 확인해 보자.
##
data(MASS)
## 실습 1. dateset(USArrests, iris, mtcars)를 불러와서 이를
## 확인해 보자.
##
library(MASS)
data(MASS)
## 실습 1. dateset(USArrests, iris, mtcars)를 불러와서 이를
## 확인해 보자.
##
rock
shinyApp(ui=ui,server=server)
ui <- fluidPage(
titlePanel("Shiny Text"),
sidebarLayout(
sidebarPanel(
selectInput(inputId="dataset",
label="데이터 셋 선택:",
choices=c("USArrests", "iris", "cars")),
numericInput(inputId='obs',
label="관측치의 수",
value=10)
),
mainPanel(
# Output:Verbatim text for data summary ----
verbatimTextOutput("summary"),  #코드 글자
# Output: HTML table
tableOutput("view")   # 글자
)
)
)
server <- function(input, output){
# selectInput(inputId="dataset"
# 요청된 데이터 셋이 반환됨.
datasetInput <- reactive({
switch(input$dataset,
"USArrests" = USArrests,
"iris" = iris,
"cars" = mtcars)
})
# data
# verbatimTextOutput("summary")
output$summary <- renderPrint({
dataset <- datasetInput()
summary(dataset)
})
# 첫 n개의 관측치를 보여준다.
output$view <- renderTable({
head(datasetInput(), n=input$obs)
})
}
shinyApp(ui=ui,server=server)
runGitHub(repo="shiny-examples", username="rstudio", subdir="050-Kmeans-example")
library(shiny)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
shinyApp(ui, server)
library(shiny)
library(ggplot2)  # for the diamonds dataset
ui <- fluidPage(
title = "Examples of DataTables",
sidebarLayout(
sidebarPanel(
conditionalPanel(
'input.dataset === "diamonds"',
checkboxGroupInput("show_vars", "Columns in diamonds to show:",
names(diamonds), selected = names(diamonds))
),
conditionalPanel(
'input.dataset === "mtcars"',
helpText("Click the column header to sort a column.")
),
conditionalPanel(
'input.dataset === "iris"',
helpText("Display 5 records by default.")
)
),
mainPanel(
tabsetPanel(
id = 'dataset',
tabPanel("diamonds", DT::dataTableOutput("mytable1")),
tabPanel("mtcars", DT::dataTableOutput("mytable2")),
tabPanel("iris", DT::dataTableOutput("mytable3"))
)
)
)
)
server <- function(input, output) {
# choose columns to display
diamonds2 = diamonds[sample(nrow(diamonds), 1000), ]
output$mytable1 <- DT::renderDataTable({
DT::datatable(diamonds2[, input$show_vars, drop = FALSE])
})
# sorted columns are colored now because CSS are attached to them
output$mytable2 <- DT::renderDataTable({
DT::datatable(mtcars, options = list(orderClasses = TRUE))
})
# customize the length drop-down menu; display 5 rows per page by default
output$mytable3 <- DT::renderDataTable({
DT::datatable(iris, options = list(lengthMenu = c(5, 30, 50), pageLength = 5))
})
}
shinyApp(ui, server)
library(shiny)
library(shiny)
shinyUI(
fluidPage(
titlePanel("My Shiny App"),
sidebarLayout(
sidebarPanel(
radioButtons("x", "Select X-axis:",
list("Sepal.Length"='a',
"Sepal.Width"='b',
"Petal.Length"='c',
"Petal.Width"='d')),
radioButtons("y", "Select Y-axis:",
list("Spal.Length"='e',
"Sepal.Width"='f',
"Petal.Length"='g',
"Petal.Width"='h'))
),
mainPanel(
plotOutput("myPlot")
)
)
)
)
shiny::runApp('drawplot')
library(shiny)
shinyServer(
function(input, output){
output$myplot <- renderPlot({
if(input$x == 'a'){
i=1
}
if(input$x == 'b'){
i=2
}
if(input$x == 'c'){
i=3
}
if(input$x == 'd'){
i=4
}
if(input$y == 'e'){
j=1
}
if(input$y == 'f'){
j=2
}
if(input$y == 'e'){
j=1
}
if(input$y == 'f'){
j=2
}
s <- iris[,i]
k <- rirs[,j]
plot(s,k)
})
}
)
if(input$y == 'f'){
j=4
}
shinyServer(
function(input, output){
output$myplot <- renderPlot({
if(input$x == 'a'){
i=1
}
if(input$x == 'b'){
i=2
}
if(input$x == 'c'){
i=3
}
if(input$x == 'd'){
i=4
}
if(input$y == 'e'){
j=1
}
if(input$y == 'f'){
j=2
}
if(input$y == 'e'){
j=3
}
if(input$y == 'f'){
j=4
}
s <- iris[,i]
k <- rirs[,j]
plot(s,k)
})
}
)
library(shiny)
shinyUI(
fluidPage(
titlePanel("My Shiny App"),
sidebarLayout(
sidebarPanel(
radioButtons("x", "Select X-axis:",
list("Sepal.Length"='a',
"Sepal.Width"='b',
"Petal.Length"='c',
"Petal.Width"='d')),
radioButtons("y", "Select Y-axis:",
list("Spal.Length"='e',
"Sepal.Width"='f',
"Petal.Length"='g',
"Petal.Width"='h'))
),
mainPanel(
plotOutput("myPlot")
)
)
)
)
library(shiny)
shiny::runApp('drawplot')
getwd()
setwd("C:/Users/ktm/Documents/drawplot")
shiny::runApp('drawplot')
setwd("C:/Users/ktm/Documents")
shiny::runApp('drawplot')
library(shiny)
shinyUI(
fluidPage(
titlePanel("Iris Dataset"),
sidebarLayout(
sidebarPanel(
radioButtons("x", "Select X-axis:",
list("Sepal.Length"='a',
"Sepal.Width"='b',
"Petal.Length"='c',
"Petal.Width"='d')),
radioButtons("y", "Select Y-axis:",
list("Sepal.Length"='e',
"Sepal.Width"='f',
"Petal.Length"='g',
"Petal.Width"='h'))
),
mainPanel(
plotOutput("distPlot")
)
)
)
)
shiny::runApp('drawplot')
shiny::runApp('drawplot')
shiny::runApp('drawplot')
library(shiny)
shinyServer(
function(input, output){
output$myplot <- renderPlot({
if(input$x == 'a'){
i=1
}
if(input$x == 'b'){
i=2
}
if(input$x == 'c'){
i=3
}
if(input$x == 'd'){
i=4
}
if(input$y == 'e'){
j=1
}
if(input$y == 'f'){
j=2
}
if(input$y == 'e'){
j=3
}
if(input$y == 'f'){
j=4
}
s <- iris[,i]
k <- rirs[,j]
plot(s,k)
})
}
)
shiny::runApp('drawplot')
#SERVER.R
library(shiny)
shinyServer(function(input, output) {
output$distPlot <- renderPlot({
if(input$x=='a'){
i<-1
}
if(input$x=='b'){
i<-2
}
if(input$x=='c'){
i<-3
}
if(input$x=='d'){
i<-4
}
if(input$y=='e'){
j<-1
}
if(input$y=='f'){
j<-2
}
if(input$y=='g'){
j<-3
}
if(input$y=='h'){
j<-4
}
s    <- iris[, i]
k    <- iris[, j]
plot(s,k)
})
})
shiny::runApp('drawplot')
#SERVER.R
library(shiny)
shinyServer(function(input, output) {
output$distPlot <- renderPlot({
if(input$x=='a'){
i<-1
}
if(input$x=='b'){
i<-2
}
if(input$x=='c'){
i<-3
}
if(input$x=='d'){
i<-4
}
if(input$y=='e'){
j<-1
}
if(input$y=='f'){
j<-2
}
if(input$y=='g'){
j<-3
}
if(input$y=='h'){
j<-4
}
s    <- iris[, i]
k    <- iris[, j]
plot(s,k)
})
})
shiny::runApp('drawplot')
shiny::runApp("drawplot")
shiny::runApp("drawplot")
library(shiny)
setwd("C:/Users/ktm/Documents")
shiny::runApp("drawplot")
library(shiny)
setwd("C:/Users/ktm/Documents")
shiny::runApp("drawplot")
library(shiny)
shiny::runApp("drawplot")
