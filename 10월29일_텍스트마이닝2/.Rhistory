B_plot + scale_x_continuous(breaks=c(10,20,30,40,50,60),
labels=paste0("$",c(10,20,30,40,50,60))) +
theme(axis.text.x=element_text(angle = 90, hjust=1, vjust=0.5))
B_plot + scale_x_continuous(breaks=c(10,20,30,40,50,60),
labels=paste0("$",c(10,20,30,40,50,60)))
B_plot + scale_x_continuous(breaks=c(10,20,30,40,50,60),
labels=paste0("$",c(10,20,30,40,50,60))) +
theme(axis.text.x=element_text(angle = 90, hjust=1, vjust=0.5))
## 범례 넣기
B_plot +theme(legend.position = c(0.85,0.2))
## 범례 넣기
B_plot +theme(legend.position = c(0.85,0.2))
##글자쓰기
B_plot + annotate("text", x=52, y=100, label="price limit")
##글자쓰기
B_plot + annotate("text", x=52, y=100, label="price limit")+
annotate("rect", xmin=0,xmax=40, ymin=0, ymin=250, alpha=2, fill='skyblue')
##글자쓰기
B_plot + annotate("text", x=52, y=100, label="price limit")+
annotate("rect", xmin=0,xmax=40, ymin=0, ymin=250, alpha=2, fill='skyblue')+
annotate("segment", x=60, xend=60, y=0, yend=300, color="black", size=10)
B_plot + annotate("text", x=52, y=100, label="price limit")+
annotate("rect", xmin=0,xmax=40, ymin=0, ymax=250, alpha=2, fill='skyblue')
B_plot + annotate("text", x=52, y=100, label="price limit")+
annotate("rect", xmin=0,xmax=40, ymin=0, ymax=250, alpha=0.2, fill='skyblue')
B_plot + annotate("text", x=52, y=100, label="price limit")+
annotate("rect", xmin=0,xmax=40, ymin=0, ymax=250, alpha=0.2, fill='skyblue')+
annotate("segment", x=60, xend=60, y=0, yend=300, color="black", size=10)
B_plot+coord_flip()
b_plot+scale_color_grey()
B_plot+scale_color_grey()
setwd("C:/Users/ktm/Documents/choi_dontouch/R-basic/시각화_실습과제/Auction_master_train6.csv")
setwd("C:/Users/ktm/Documents/choi_dontouch/R-basic/시각화_실습과제/Auction_master_train6.csv")
getwd
getwd()
setwd("./choi_dontouch/R-basic/시각화_실습과제/Auction_master_train6.csv")
setwd("../choi_dontouch/R-basic/시각화_실습과제/Auction_master_train6.csv")
getwd()
setwd("C:/Users/ktm/Documents/choi_dontouch/R-basic/시각화_실습과제/Auction_master_train6.csv")
auc <- read.csv("C:/Users/ktm/Documents/choi_dontouch/R-basic/시각화_실습과제/Auction_master_train6.csv", na.strings = ("", NA))
auc <- read.csv("C:/Users/ktm/Documents/choi_dontouch/R-basic/시각화_실습과제/Auction_master_train6.csv", na.strings =c("", NA))
dim(auc)
is.na(auc)
which(is.na(auc))
install.packages("tuneR", dep=TRUE)
library(tuneR)
##시간파를 분석 조작 편집 합성
install.packages("seewave")
library(seewave)
sObj <-readWave("C:/Users/ktm/Documents/choi_dontouch\R-basic/10월 22일_음성데이터 시각화/Cartoon_Slip.wav")
sObj <-readWave("C:/Users/ktm/Documents/choi_dontouch/R-basic/10월 22일_음성데이터 시각화/Cartoon_Slip.wav")
play(sObj)
plot(sObj)
sObj2 <-readWave("C:/Users/ktm/Documents/choi_dontouch/R-basic/10월 22일_음성데이터 시각화/dob_bark_nofree.wav")
plot(sObj2)
play(sObj)
play(sObj)
play(sObj2)
sObj2 <-readWave("C:/Users/ktm/Documents/choi_dontouch/R-basic/10월 22일_음성데이터 시각화/monkey01_free.wav")
plot(sObj3)
sObj1 <-readWave("C:/Users/ktm/Documents/choi_dontouch/R-basic/10월 22일_음성데이터 시각화/Cartoon_Slip.wav")
sObj2 <-readWave("C:/Users/ktm/Documents/choi_dontouch/R-basic/10월 22일_음성데이터 시각화/dob_bark_nofree.wav")
sObj3 <-readWave("C:/Users/ktm/Documents/choi_dontouch/R-basic/10월 22일_음성데이터 시각화/monkey01_free.wav")
plot(sObj1)
plot(sObj2)
plot(sObj3)
is(sObj1)
sObj1@left
sObj1@right
str(sObj1)
sObj1@stereo
sObj1@samp.rate
str(sObj2)
str(sObj3)
summary(sObj1)
###03.sound 그래프 표시
timeArray <- (0:(23708-1))/ sObj@samp.rate
s1 <- sObj1@left/2^(sObj1@bit -1)
plot(timeArray, s1)
###########고속 푸리에 변환 알고리즘 -fft함수
####fft: 디지털 신호 처리에서 선미분 방정식
####
fft(s1)
head(s1)
head(fft(s1))
n<- length(s1)
p <- fft(s1)
sampleLen = 5000
pm <- p[1:sampleLen]
pm <- abs(pm)
install.packages("Synth")
library(Synth)
data(tico)
## 간단한 그래프 표시 10000~15000까지
plot(sObj@left[0:15000], type="l",
main="Sound SObj",
xlab="Time", ylab="Frequency")
plot(timeArray, s1, type='l', col='black', xlab='Time(ms)',
ylab='Amplitude')
# 고속 푸리에 변환 알고리즘을 구현하는 fft 함수
# FFT는 디지털 신호처리에서 편미분 방정식을 구하는 알고리즘까지 많은 분야에서 사용.
# 사운드의 주파수 스펙트럼
# https://goo.gl/EPiMXM : 고속 푸리에 변환 위키
# FFT : Fast Fourier transform
fft(s1)
n <- length(s1)  # 길이
p <- fft(s1)
p
sampleLen = 5000
pm <- p[1:sampleLen]
pm <- abs(pm)
sampleLen = 5000
pm <- p[1:sampleLen]
pm
pm <- abs(pm)
pm
# fft함수에 의해 반환된 톤의 푸리에 변환은 크기 정보 및 위상 정보 모두 포함.
# 복소수 표현으로 주어진다.
# 푸리에 변환의 절대값을 취함으로써 주파수 성분의 크기에 대한 정보를 얻는다.
pm <- pm / n
pm <- pm^2
pm
head(pm)
if (n %% 2 > 0){
pm[2:length(pm)] <- pm[2:length(pm)]*2 # we've got odd number of points fft
} else {
pm[2: (length(pm) -1)] <- pm[2: (length(pm) -1)]*2 # we've got even number of points fft
}
freqArray <- (0:(sampleLen-1)) * (sObj@samp.rate / n) #  create the frequency array
plot(freqArray/1000, 10*log10(pm), type='l',
col='black', xlab='Frequency (kHz)', ylab='Power (dB)')
play(tico)
plot(tico)
plot(tico@left[0:length(tico)])
plot(tico@left)
plot(tico@left)
plot(tico@left[0:length(tico)])
plot(tico@left[0:length(tico)], main="Sound tico",
ylab="freequency", xlab="Time")
spectro(tico,
f=22000,
ovlp=30,
collevels=seq(-40,0,0.5),
osc=TRUE)
spectro(tico,
f=22000,
ovlp=90,
collevels=seq(-40,0,0.5),
osc=TRUE)
spectro(tico,
f=22000,
ovlp=100,
collevels=seq(-40,0,0.5),
osc=TRUE)
spectro(tico,
f=22000,
ovlp=10,
collevels=seq(-40,0,0.5),
osc=TRUE)
spectro(tico,
f=22000)
spectro(tico,
f=22000,
ovlp=10)
spectro(tico,
f=22000,
ovlp=10,
collevels=seq(-40,0,0.5))
spectro(tico,
f=22000,
ovlp=10,
collevels=seq(-40,0,0.5),
osc=TRUE)
data(peewit)
is(temp.colors)
spectro(peewit, f=22000,
palette=temp.colors,
collevels=seq(-100,0,1))
####3차원 그래프 시각화
data(tico)
wf(tico, f=22050)
wf(tico, f=22050, ovlp=50)
wf(tico, f=22050, ovlp=50, hoff=2)
wf(tico, f=22050, ovlp=50, hoff=2, voff=1)
wf(tico, f=22050, ovlp=50, hoff=2, voff=1, border="#00000075")
wf(tico, f=22050, ovlp=50, hoff=2, voff=1, border="#000000075")
wf(tico, f=22050, ovlp=50, hoff=2, voff=1, border="#00000075")
wf(tico, f=22050, ovlp=50, hoff=2, voff=1, border="#0000075")
wf(tico, f=22050, ovlp=50, hoff=2, voff=1, border="#00000075")
wf(tico, f=22050, ovlp=50, hoff=2, voff=5, border="#00000075")
# 두 파형의 비교
# wave[(c - wl2):(c + wl2), ]
spec1 = spec(tico, f=22050, at=0.2, plot=FALSE)
spec2 = spec(tico, f=22050, at=1.1, plot=FALSE)
corspec(spec1, spec2,
main="cross-correlation between two spectra")
corspec(spec1, spec2,
main="cross-correlation between two spectra")
b1 <- readWave("C:/Users/ktm/Documents/choi_dontouch/R-basic/10월 22일_음성데이터 시각화/321179.wav")
b2 <- readwave("C:/Users/ktm/Documents/choi_dontouch/R-basic/10월 22일_음성데이터 시각화/439535.wav")
b3 <- readwave("C:/Users/ktm/Documents/choi_dontouch/R-basic/10월 22일_음성데이터 시각화/418876.wav")
b4 <- readwave("C:/Users/ktm/Documents/choi_dontouch/R-basic/10월 22일_음성데이터 시각화/395919.wav")
b5 <- readwave("C:/Users/ktm/Documents/choi_dontouch/R-basic/10월 22일_음성데이터 시각화/366935.wav")
b6 <- readwave("C:/Users/ktm/Documents/choi_dontouch/R-basic/10월 22일_음성데이터 시각화/366692.wav")
b7 <- readwave("C:/Users/ktm/Documents/choi_dontouch/R-basic/10월 22일_음성데이터 시각화/352367.wav")
b8 <- readwave("C:/Users/ktm/Documents/choi_dontouch/R-basic/10월 22일_음성데이터 시각화/352366.wav")
library(tuneR)
library(seewave)
b1 <- readWave("C:/Users/ktm/Documents/choi_dontouch/R-basic/10월 22일_음성데이터 시각화/321179.wav")
b2 <- readwave("C:/Users/ktm/Documents/choi_dontouch/R-basic/10월 22일_음성데이터 시각화/439535.wav")
b3 <- readwave("C:/Users/ktm/Documents/choi_dontouch/R-basic/10월 22일_음성데이터 시각화/418876.wav")
b2 <- readWave("C:/Users/ktm/Documents/choi_dontouch/R-basic/10월 22일_음성데이터 시각화/439535.wav")
b2 <- readWave("C:/Users/ktm/Documents/choi_dontouch/R-basic/10월 22일_음성데이터 시각화/439535.wav")
b3 <- readwave("C:/Users/ktm/Documents/choi_dontouch/R-basic/10월 22일_음성데이터 시각화/418876.wav")
b3 <- readWave("C:/Users/ktm/Documents/choi_dontouch/R-basic/10월 22일_음성데이터 시각화/418876.wav")
b4 <- readWave("C:/Users/ktm/Documents/choi_dontouch/R-basic/10월 22일_음성데이터 시각화/395919.wav")
b5 <- readWave("C:/Users/ktm/Documents/choi_dontouch/R-basic/10월 22일_음성데이터 시각화/366935.wav")
b6 <- readWave("C:/Users/ktm/Documents/choi_dontouch/R-basic/10월 22일_음성데이터 시각화/366692.wav")
b7 <- readWave("C:/Users/ktm/Documents/choi_dontouch/R-basic/10월 22일_음성데이터 시각화/352367.wav")
b8 <- readWave("C:/Users/ktm/Documents/choi_dontouch/R-basic/10월 22일_음성데이터 시각화/352366.wav")
library(shiny)
runApp('drawplot')
shinyUI(
fluidPage(
titlePanel("My Shiny App"),
sidebarLayout(
sidebarPanel(
radioButtons("x", "Select X-axis:",
list("Sepal.Length"='a',
"Sepal.Width"='b',
"Petal.Length"='c',
"Petal.Width"='d')),
radioButtons("y", "Select Y-axis:",
list("Spal.Length"='e',
"Sepal.Width"='f',
"Petal.Length"='g',
"Petal.Width"='h'))
),
mainPanel(
plotOutput("myPlot")
)
)
)
)
#SERVER.R
library(shiny)
shinyServer(function(input, output) {
output$distPlot <- renderPlot({
if(input$x=='a'){
i<-1
}
if(input$x=='b'){
i<-2
}
if(input$x=='c'){
i<-3
}
if(input$x=='d'){
i<-4
}
if(input$y=='e'){
j<-1
}
if(input$y=='f'){
j<-2
}
if(input$y=='g'){
j<-3
}
if(input$y=='h'){
j<-4
}
s    <- iris[, i]
k    <- iris[, j]
plot(s,k)
})
})
shiny::runApp("drawplot")
shiny::runApp("drawplot")
runApp('drawplot')
runApp('drawplot')
runApp('drawplot')
runApp('drawplot')
runApp('drawplot')
shiny::runapp("drawplot")
shiny::runApp("drawplot")
shinyApp(ui=ui,server=server)
shiny::runApp("drawplot")
install.packages("devtools")
devtools::install_packages("rstudio/shiny")
library(runGithub)
install.packages("runGithub")
install.packages("shinydashboard")
library(shinydashboard)
runExample("01_hello")
runExample("04_mpg")
runExample("08_html")
runGitHub(repo="shiny-examples", username="rstudio",
subdir="086-bus-dashboard")
install.packages(c('shiny', 'ggvis', 'dplyr', 'RSQLite'))
install.packages(c("shiny", "ggvis", "dplyr", "RSQLite"))
install.packages(c("shiny", "ggvis", "dplyr", "RSQLite"))
install.packages(c("shiny", "ggvis", "dplyr", "RSQLite"))
install.packages(c("shiny", "ggvis", "dplyr", "RSQLite"))
install.packages(c("shiny", "ggvis", "dplyr", "RSQLite"))
install.packages(c("shiny", "ggvis", "dplyr", "RSQLite"))
install.packages(c("shiny", "ggvis", "dplyr", "RSQLite"))
runGitHub(repo="shiny-examples", username="rstudio",
subdir="051-movie-explorer")
runGitHub(repo="shiny-examples", username="rstudio",
subdir="086-bus-dashboard")
library(C(shiny, ggvis, dplyr, RSQLLite))
library(shinydashboard)
library(runGithub)
runGitHub(repo="shiny-examples", username="rstudio",
subdir="086-bus-dashboard")
install.packages("runGithub")
install.packages("shinydashboard")
install.packages("shinydashboard")
library(runGithub)
library(shinydashboard)
runExample()
runExample("01_hello")
runExample("04_mpg")
runExample("08_html")
setwd("C:/Users/ktm/Documents/choi_dontouch/R-basic/dacon_경매/Auction_master_test")
train <- read.csv("Auction_master_train.csv", na.strings=c("", NA))
train <- read.csv("Auction_master_train.csv", na.strings=c("", NA), encoding="UTF-8")
train <- read.csv("Auction_master_train.csv", na.strings=c("", NA))
train
##KoNLP
library(KoNLP)
search()
useSejongDic()
train
str(train)
install.packages("igraph")
install.packages("igraph")
install.packages("igraph")
install.packages("igraph")
install.packages("igraph")
install.packages("igraph")
library(igraph)
library(network)
library(igraph)
library(sna)
install.packages("igraph")
install.packages("igraph")
library(igraph)
plot(train$Claim_price, y=rep(5,10), pch=19, cex=3)
plot(train$Claim_price, train$Hammer_price, pch=19, cex=3)
plot(train$Claim_price, train$Hammer_price, pch=19, cex=1)
plot(train$Auction_key, train$Hammer_price, pch=19, cex=1)
points(train$Auction_key, train$Claim_price,pch=19,cex=1,col=rgb(.25,.5,.3))
points(train$Auction_key, train$Minimum_sales_price, pch=19, cex=3, col=rgb(37,59,233, max=255))
points(train$Auction_key, train$Minimum_sales_price, pch=19, cex=1, col=rgb(37,59,233, max=255))
points(train$Auction_key, train$Claim_price,pch=19,cex=1,col=rgb(.25,.5,.3))
points(train$Auction_key, train$Minimum_sales_price, pch=19, cex=1, col=rgb(37,59,233, max=255))
plot(train$Auction_key, train$Hammer_price, pch=19, cex=1)
points(train$Auction_key, train$Claim_price,pch=19,cex=1,col=rgb(.25,.5,.3))
points(train$Auction_key, train$Minimum_sales_price, pch=19, cex=1, col=rgb(37,59,233, max=255))
lins(train$Auction_key, train$Claim_price,pch=19,cex=1,col=rgb(.25,.5,.3))
setwd("C:/Users/ktm/Documents/choi_dontouch/R-basic/10월29일_텍스트마이닝2")
library(tm)
library(KoNLP)
trump <- readLines("dir_multi", encoding='UTF-8')
myCorpus <- VCorpus(DirSource("dir_multi", pattern="txt"))
myCorpus
inspect(myCorpus)
myCorpus <- tm_map(myCorpus, stripWhitespace) #공백제거
myCorpus <- tm_map(myCorpus, tolower)         ##소문자로
myCorpus <- tm_map(myCorpus, removePunctuation)##특수문자제거
myCorpus <- tm_map(myCorpus, removeNumbers) ##숫자제거
myCorpus <- tm_map(myCorpus, removeWords, stopwords("en"))##불용어 제거
inspect(myCorpus)
str(myCorpus[1])
myCorpus <- VCorpus(DirSource("dir_multi", pattern="txt"))
inspect(myCorpus)
str(myCorpus[1])
str(myCorpus[2])
str(myCorpus[[2]])
inspect(myCorpus)
content(myCorpus[1])
content(myCorpus[[1]])
###문서의 내용 전체를 보겠다
lapply(myCorpus, content)
###meta정보 보기 및 추가
meta(myCorpus[[3]])
meta(myCorpus[[1]], tag='etc') <- "추가"
meta(myCorpus[[3]], tag='author')<- "choi"
###meta정보 보기 및 추가
meta(myCorpus[[3]])
###meta정보 보기 및 추가
meta(myCorpus[[1]])
length(myCorpus[[1]]$content)
myCorpus$content
myCorpus[1]$content
myCorpus[[1]]$content
myCorpus[[1]]$meta
str(myCorpus[[2]])
str(myCorpus)
myCorpus[[i]]$content <- paste(myCorpus[[i]]$content, collapse=" ")
###각각의 문서의 리뷰를 한줄로 만들겠다
for(i in seq_along(myCorpus)){
myCorpus[[i]]$content <- paste(myCorpus[[i]]$content, collapse=" ")
}
myCorpus <- tm_map(myCorpus, removeNumbers) ##숫자제거
myCorpus <- tm_map(myCorpus, removePunctuation)##특수문자제거
myCorpus <- tm_map(myCorpus, stripWhitespace) #공백제거
myCorpus <- tm_map(myCorpus, tolower)         ##소문자로
myCorpus <- tm_map(myCorpus, removeWords, stopwords("en"))##불용어 제거
inspect(myCorpus)
myCorpus[[1]]$meta
myCorpus[[1]]$content
myCorpus <- VCorpus(DirSource("dir_multi", pattern="txt"))
###각각의 문서의 리뷰를 한줄로 만들겠다
for(i in seq_along(myCorpus)){
myCorpus[[i]]$content <- paste(myCorpus[[i]]$content, collapse=" ")
}
myCorpus <- tm_map(myCorpus, stripWhitespace) #공백제거
myCorpus[[1]]$content
#myCorpus <- tm_map(myCorpus, tolower)         ##소문자로
myCorpus <- tm_map(myCorpus, removePunctuation)##특수문자제거
myCorpus <- tm_map(myCorpus, removeNumbers) ##숫자제거
myCorpus <- tm_map(myCorpus, removeWords, stopwords("en"))##불용어 제거
myCorpus[[1]]$content
inspect(myCorpus)
library(KoNLP)
library(NIADic)
useNIADic()
myCorpus <- tm_map(myCorpus, removeWords, stopwords("영화","ㅋㅋㅋ"))
myCorpus <- tm_map(myCorpus, removeWords, stopwords(c("영화","ㅋㅋㅋ"))
myCorpus <- tm_map(myCorpus, removeWords, stopwords(c("영화","ㅋㅋㅋ")))
myCorpus <- tm_map(myCorpus, removeWords, stopwords(c("영화","ㅋㅋㅋ"))
library(KoNLP)
myCorpus <- tm_map(myCorpus, removeWords, stopwords(c("영화","ㅋㅋㅋ")))
myCorpus <- tm_map(myCorpus, removeWords, ("영화","ㅋㅋㅋ"))
myCorpus <- tm_map(myCorpus, removeWords, c("영화","ㅋㅋㅋ"))
myCorpus <- tm_map(myCorpus, removeWords, c("영화","ㅋㅋㅋ","여러"))
inspect(myCorpus)
myCorpus[[i]]$contentn <- gsub("영화","", myCorpus[[i]]$content)
inspect(myCorpus)
myCorpus[[1]]$content
myCorpus <- tm_map(myCorpus, removeWords, c("영화","ㅠㅠ","여러"))
myCorpus[[1]]$content
myCorpus[[i]]$contentn <- gsub("ㅠㅠ","", myCorpus[[i]]$content)
for ( i in seq_along(myCorpus)){
myCorpus[[i]]$contentn <- gsub("ㅠㅠ","", myCorpus[[i]]$content)
}
myCorpus[[1]]$content
for ( i in seq_along(myCorpus)){
myCorpus[[i]]$contentn <- gsub("ㅎㅎㅎㅎㅎㅎㅎㅎ","", myCorpus[[i]]$content)
}
myCorpus[[1]]$content
myCorpus[[1]]$contentn <- gsub("ㅎㅎㅎㅎㅎㅎㅎㅎ","", myCorpus[[1]]$content)
myCorpus[[1]]$content
myCorpus[[1]]$contentn <- gsub("SF","", myCorpus[[1]]$content)
myCorpus[[1]]$content
myCorpus <- tm_map(myCorpus, removeWords, stopwords("영화"))##불용어 제거
myCorpus <- tm_map(myCorpus, removeWords, stopwords("SF"))##불용어 제거
myCorpus <- tm_map(myCorpus, removeWords, stopwords("en"))##불용어 제거
myCorpus[[1]]$contentn <- gsub("SF","", myCorpus[[1]]$content)
myCorpus[[1]]$content
myCorpus[[1]]$contentn <- gsub("한석규","", myCorpus[[1]]$content)
myCorpus[[1]]$content
myCorpus[[i]]$contentn <- gsub("ㅎㅎㅎㅎㅎㅎㅎㅎ","", myCorpus[[i]]$content)
for ( i in seq_along(myCorpus)){
myCorpus[[i]]$contentn <- gsub("ㅎㅎㅎㅎㅎㅎㅎㅎ","", myCorpus[[i]]$content)
}
myCorpus <- tm_map(myCorpus, removeWords, c("영화","ㅎㅎㅎ","여러"))
inspect(myCorpus)
####################ggplot
attach(train)
g1<-ggplot(train$Auction_key,aes(train$Hammer_price,train$Bid_class))
####################ggplot
dettach(train)
####################ggplot
detach(train)
####################ggplot
library(ggplot)
####################ggplot
install.packages("ggplot")
library(ggplot)
####################ggplot
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
library(ggplot)
library(ggplot2)
####################ggplot
install.packages("ggplot2")
library(ggplot2)
g1<-ggplot(train$Auction_key,aes(train$Hammer_price,train$Bid_class))
library(ggplot2)
####################ggplot
install.packages("ggplot2")
g1<-ggplot(train$Auction_key,aes(train$Hammer_price,train$Bid_class))
library(ggplot2)
####################ggplot
install.packages("ggplot2")
library(ggplot2)
####################ggplot
install.packages("ggplot2")
library(ggplot2)
####################ggplot
install.packages("ggplot2")
g1<-ggplot(train$Auction_key,aes(train$Hammer_price,train$Bid_class))
library(ggplot2)
g1<-ggplot(train$Auction_key,aes(train$Hammer_price,train$Bid_class))
library(ggplot2)
